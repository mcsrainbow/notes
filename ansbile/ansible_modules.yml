# https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html
---
- name: enable and restart etcd service with daemon_reload
  service:
    name: etcd
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: wait for etcd service to be available
  shell: "systemctl status etcd.service|grep Active"
  register: etcd_status
  until: '"running" in etcd_status.stdout'
  retries: 5
  delay: 10
  
---
- shell: "echo {{ item }}"
  loop:
    - "one"
    - "two"
  register: echo
  
- name: fail if return code is not 0
  fail:
    msg: "The command ({{ item.cmd }}) did not have a 0 return code"
  when: item.rc != 0
  with_items: "{{ echo.results }}"

---
- name: get user accounts
  command: "awk -F: '{print $1}' /etc/passwd"
  changed_when: False
  check_mode: False
  register: users

- name: delete rhosts files from system
  file:
    dest: '~{{ item }}/.rhosts'
    state: 'absent'
  with_flattened: 
    - '{{ users.stdout_lines | default([]) }}'

# https://docs.ansible.com/ansible/latest/modules/wait_for_module.html
---
- name: sleep for 300 seconds and continue with play
  wait_for:
    timeout: 300
  delegate_to: localhost

- name: Waits for port 8000 of any IP to close active connections, don't start checking for 10 seconds
  wait_for:
    host: 0.0.0.0
    port: 8000
    delay: 10
    state: drained

# https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.html
---
- name: handle the error
  block:
    - debug:
        msg: 'I execute normally'
    - name: i force a failure
      shell: /bin/false
    - debug:
        msg: 'I never execute, due to the above task failing, :-('
  rescue:
    - debug:
        msg: 'I caught an error, can do stuff here to fix it, :-)'
        
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
---
  tasks:
    - name: send summary mail
      local_action:
        module: mail
        subject: "Summary Mail"
        to: "{{ mail_recipient }}"
        body: "{{ mail_body }}"
      run_once: True
      
- shell: /opt/app/upgrade_db.py
  run_once: true
  delegate_to: app1.example.org
  
# https://docs.ansible.com/ansible/latest/modules/set_fact_module.html
---
- set_fact:
     one_fact: something
     other_fact: "{{ local_var * 2 }}"
     another_fact: "{{ some_registered_var.results | map(attribute='ansible_facts.some_fact') | list }}"

- set_fact:
    one_fact: something
    other_fact: "{{ local_var * 2 }}"
    cacheable: yes

# https://docs.ansible.com/ansible/latest/modules/fail_module.html
---
- name: get docker service status
  shell: 'systemctl status docker|grep Active || echo "NOT FOUND"'
  register: docker_status

- name: fail info
  fail: msg="Docker already installed"
  when: '"running" in docker_status.stdout'

# https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html
---
- name: ensure SELinux is set to enforcing mode
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=enforcing
    
- name: add and apply crictl completion
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'crictl completion'
    line: 'source <(crictl completion)'

# https://docs.ansible.com/ansible/latest/user_guide/playbooks_environment.html
---
- name: install app
  shell: ./app-centos7-{{ app_version }}.sh --target {{ app_base }} --config {{ app_base }}/deploy/app.cfg && touch /var/.app_install.succeed
  args:
    chdir: "{{ app_base }}/deploy"
    creates: "/var/.app_install.succeed"
  environment:
    JAVA_TOOL_OPTIONS: "-Djava.io.tmpdir={{ app_base }}/tmp"
  register: app_install
  when:
    - ansible_facts['distribution'] == "CentOS"
    - ansible_facts['distribution_major_version'] == "7"

# https://docs.ansible.com/ansible/latest/modules/import_tasks_module.html
---
- hosts: app
  tasks:
    - import_tasks: roles/common/tasks/centos7_yum.yml

- hosts: app
  roles:
    - common
    
# https://docs.ansible.com/ansible/latest/modules/blockinfile_module.html
---
- name: configure /etc/bashrc ANSIBLE MANAGED BLOCK
  blockinfile:
    dest: /etc/bashrc
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      # history
      export HISTFILESIZE="10000000"
      export HISTSIZE="10000"
      export PROMPT_COMMAND="history -a"
      export HISTTIMEFORMAT="%Y-%m-%d_%H:%M:%S "
      export HISTCONTROL="ignoredups"

      # alias
      alias ls='ls --color'
      alias ll='ls --color -l'
      alias rm='rm -i'
      alias cp='cp -i'
      alias mv='mv -i'
      alias grep='grep --color=auto'
      alias la='ls -A'

      # complete
      complete -cf sudo

# https://docs.ansible.com/ansible/latest/plugins/lookup/fileglob.html
---
- name: display paths of all .txt files in dir
  debug: msg={{ lookup('fileglob', '/path/to/*.txt') }}

- name: copy each file over that matches the given pattern
  copy:
    src: "{{ item }}"
    dest: "/path/to/app/"
    owner: "{{ app_owner }}"
    group: "{{ app_group }}"
    mode: "0600"
  with_fileglob:
    - "app/*"
    
- name: configure Zabbix externalscripts
  template: 
    src: "externalscripts/{{ item | basename }}"
    dest: "/usr/lib/zabbix/externalscripts/{{ item | basename | regex_replace('\.j2','') }}"
    owner: zabbix
    group: zabbix
    mode: "0755"
  with_fileglob:
    - "../templates/externalscripts/*.j2"
